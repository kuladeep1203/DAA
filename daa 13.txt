1)

#include <stdio.h>

int mat[100][100];

void adjmat(int n);
int IsCycle(int n);
int Check_Cycle(int n, int i, int visited[n], int visited1[n]);

int main()
{
    int n;

    printf("Enter no.of vertcies : ");
    scanf("%d", &n);

    adjmat(n);

    if (IsCycle(n))
    {
        printf("IT IS CYCLIC \n");
    }

    else
    {
        printf("IT IS NOT CYCLIC \n");
    }

    return 0;
}

void adjmat(int n)
{
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            mat[i][j] = 0;
        }
    }

    int src, tgt;

    int max_edges = n * (n - 1);

    for (int i = 0; i < max_edges; i++)
    {
        printf("Enter the source and target for the edge [ Enter ( -1 -1 ) to EXIT ] : ");
        scanf("%d%d", &src, &tgt);

        if (src == -1 && tgt == -1)
        {
            break;
        }

        else
        {
            mat[src][tgt] = 1;
        }
    }

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            printf(" %d ", mat[i][j]);
        }
        printf("\n");
    }
}

int IsCycle(int n)
{
    int visited[n];
    int visited1[n];

    for (int i = 0; i < n; i++)
    {
        visited1[i] = 0;
        visited[i] = 0;
    }

    for (int i = 0; i < n; i++)
    {
        if (visited[i] == 0 && Check_Cycle(n, i, visited, visited1) == 1)
        {
            return 1;
        }
    }

    return 0;
}

int Check_Cycle(int n, int i, int visited[n], int visited1[n])
{

    if (visited[i] == 0)
    {
        visited[i] = 1;
        visited1[i] = 1;

        for (int j = 0; j < n; j++)
        {
            if (mat[i][j] == 1)
            {
                if (visited[j] == 0 && Check_Cycle(n, j, visited, visited1) == 1)
                {
                    return 1;
                }

                else if (visited1[j] == 1)
                {
                    return 1;
                }
            }
        }
    }

    visited1[i] = 0;

    return 0;
}






2)
#include <iostream>
#include <stack>

using namespace std;

int mat[100][100];
int mat1[100][100];
int visited[100];

stack<int> stk;

void adjmat(int n);
void topological_sort(int n, int node);
void get_transpose(int n);
void scc(int n);
void dfs(int n, int node);

int main()
{
    int n;

    cout << "Enter no.of vertices : ";
    cin >> n;

    adjmat(n);
    scc(n);

    return 0;
}

void adjmat(int n)
{
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            mat[i][j] = 0;
        }
    }

    int src, tgt;

    int max_edges = n * (n - 1);

    for (int i = 0; i < max_edges; i++)
    {
        printf("Enter the source and target for the edge [ Enter ( -1 -1 ) to EXIT ] : ");
        scanf("%d%d", &src, &tgt);

        if (src == -1 && tgt == -1)
        {
            break;
        }

        else
        {
            mat[src][tgt] = 1;
        }
    }

    // for (int i = 0; i < n; i++)
    // {
    //     for (int j = 0; j < n; j++)
    //     {
    //         printf(" %d ", mat[i][j]);
    //     }
    //     printf("\n");
    // }
}

void topological_sort(int n, int node)
{
    visited[node] = 1;

    for (int i = 0; i < n; i++)
    {
        if (mat[node][i] == 1)
        {
            if (visited[i] == 0)
            {
                topological_sort(n, i);
            }
        }
    }

    stk.push(node);
}

void get_transpose(int n)
{
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            mat1[i][j] = 0;
        }
    }

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (mat[i][j] == 1)
            {
                mat1[j][i] = 1;
            }
        }
    }
}

void scc(int n)
{
    for (int i = 0; i < n; i++)
    {
        visited[i] = 0;
    }

    for (int i = 0; i < n; i++)
    {
        if (visited[i] == 0)
        {
            topological_sort(n, i);
        }
    }

    // for (int i = 0; i < n; i++)
    // {
    //     for (int j = 0; j < n; j++)
    //     {
    //         printf(" %d ", mat[i][j]);
    //     }
    //     printf("\n");
    // }

    // printf("\n");

    get_transpose(n);

    // for (int i = 0; i < n; i++)
    // {
    //     for (int j = 0; j < n; j++)
    //     {
    //         printf(" %d ", mat1[i][j]);
    //     }
    //     printf("\n");
    // }

    for (int i = 0; i < n; i++)
    {
        visited[i] = 0;
    }

    while (!stk.empty())
    {
        int x = stk.top();

        stk.pop();

        if (visited[x] == 0)
        {
            dfs(n, x);
            cout << endl;
        }
    }
}

void dfs(int n, int node)
{
    visited[node] = 1;

    cout << node << " ";

    for (int j = 0; j < n; j++)
    {
        if (mat1[node][j] == 1)
        {
            if (visited[j] == 0)
            {
                dfs(n, j);
            }
        }
    }
}









3)






#include <bits/stdc++.h>
using namespace std;
void dfs(int node, vector<int> adj[], int dp[], bool vis[])
{
    vis[node] = true;
    for (int i = 0; i < adj[node].size(); i++) {
        if (!vis[adj[node][i]])
            dfs(adj[node][i], adj, dp, vis);
        dp[node] = max(dp[node], 1 + dp[adj[node][i]]);
    }
}
void addEdge(vector<int> adj[], int u, int v)
{
    adj[u].push_back(v);
}
int findLongestPath(vector<int> adj[], int n)
{
    int dp[n + 1];
    memset(dp, 0, sizeof dp);
    bool vis[n + 1];
    memset(vis, false, sizeof vis);
    for (int i = 1; i <= n; i++) {
        if (!vis[i])
            dfs(i, adj, dp, vis);
    }

    int ans = 0;
    for (int i = 1; i <= n; i++) {
        ans = max(ans, dp[i]);
    }
    return ans;
}
int main()
{
    int v,e;
    cout<<"Enter number of vertices\n";
    cin>>v;
    cout<<"Enter number of edges\n";
    cin>>e;
    vector<int> adj[v + 1];
    for(int i=0;i<e;++i){
        int s,d;
        cout<<"Enter source and destination of "<<i+1<<"Edge\n";
        cin>>s>>d;
        addEdge(adj, s, d);
    }
    cout << "The longest path possible in graph is "<<findLongestPath(adj, v)<<endl;
    return 0;
}






4)


#include <bits/stdc++.h>
using namespace std;

class Graph
{
    int V;      
    list<int> *adj;  
public:
    Graph(int V);       
    void addEdge(int v, int w);
    void longestPathLength(); 
    pair<int, int> bfs(int u); 
};

Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
}
void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w); 
    adj[w].push_back(v); 
}
pair<int, int> Graph::bfs(int u)
{
    int dis[V];
    memset(dis, -1, sizeof(dis));

    queue<int> q;
    q.push(u);
    dis[u] = 0;

    while (!q.empty())
    {
        int t = q.front();   q.pop();
        for (auto it = adj[t].begin(); it != adj[t].end(); it++)
        {
            int v = *it;
            if (dis[v] == -1)
            {
                q.push(v);
                dis[v] = dis[t] + 1;
            }
        }
    }
    int maxDis = 0;
    int nodeIdx;
    for (int i = 0; i < V; i++)
    {
        if (dis[i] > maxDis)
        {
            maxDis = dis[i];
            nodeIdx = i;
        }
    }
    return make_pair(nodeIdx, maxDis);
}
void Graph::longestPathLength()
{
    pair<int, int> t1, t2;
    t1 = bfs(0);
    t2 = bfs(t1.first);
    cout << "Longest path is from " << t1.first << " to "<< t2.first << " of length " << t2.second;
}
int main()
{
    int v;
    cout<<"Enter number of vertices in tree\n";
    cin>>v;
    Graph g(v);
    for(int i=0;i<v-1;++i){
        int a,b;
        cout<<"Enter the nodes connecting edge "<<i+1<<endl;
        cin>>a>>b;
        g.addEdge(a,b);
    }
        g.longestPathLength();
    return 0;
}









5)







#include <stdio.h>
int min(int a, int b)
{
    if (a > b)
        return b;
    else
        return a;
}
int main()
{
    int n, source, b, source1;
    printf("enter the no.of nodes\n");
    scanf("%d", &n);
    int dist[n];
    for (int i = 0; i < n; i++)
        dist[i] = -1111;
    int w[n][n];
    int dist1[n][n];
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            w[i][j] = 0;
        }
    }
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (i == j)
                w[i][j] = 0;
            else if (w[i][j] == 0)
            {
                printf("enter w b/w %d and %d", i, j);
                scanf("%d", &b);
                w[i][j] = b;
                w[j][i] = b;
            }
        }
    }
    for (int k = 0; k < n; k++)
    {
        for (int i = 0; i < n; i++)
            dist[i] = __INT32_MAX__;
        source1 = k;
        dist[source1] = 0;
        for (int i = 0; i < n - 1; i++)
        {
            source = i + source1;
            if (source < n)
            {
                for (int j = 0; j < n; j++)
                {
                    if (w[source][j] != 0)
                    {
                        if (dist[j] > dist[source] + w[source][j] && dist[source] != __INT32_MAX__)
                            dist[j] = dist[source] + w[source][j];
                    }
                }
            }
        }
        for (int i = 0; i < n; i++)
        {
            if (k == 0)
                dist1[k][i] = dist[i];
            else if (k <= i)
            {

                dist1[k][i] = min(dist1[k - 1][i] + dist1[k][k - 1], dist[i]);
            }
            if (k > i)
            {
                dist1[k][i] = dist1[i][k];
            }
        }
    }
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            printf("%d to %d is %d\n", i, j, dist1[i][j]);
        }
    }
}


