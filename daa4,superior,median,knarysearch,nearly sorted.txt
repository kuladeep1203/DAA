1)


#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

void merge(int arr[], int l, int m, int r)
{
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;
    int L[n1], R[n2];
    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];
    i = 0; 
    j = 0; 
    k = l; 
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
void mergeSort(int arr[], int l, int r)
{
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}
int main()
{
    int n,count=0;
    scanf("%d",&n);
    int arr[n];
    for(int i=0;i<n;i++)
        scanf("%d",&arr[i]);
    int arr_size = sizeof(arr) / sizeof(arr[0]);
    mergeSort(arr, 0, arr_size - 1);
    int i;
    if(n==1)
printf("*\n");
    else
    {
  for( i=0;i<n/2;i++)
  {
    if(arr[i]==arr[i+n/2]){
     printf("%d\n",arr[i]);
        count=count+1;
        break; 
    }
  }
    if(count==0)
    printf("*\n");
    }
    return 0;
    
    
}




2)


n = int(input())
if n == 1:
    print('*')
    exit()
a = []
b = dict()
for i in range(n):
    num = int(input())
    a.append(num)
    try:
        b[num] += 1
    except KeyError:
        b[num] = 1

for i,j in b.items():
    if(j >= (n//2+1)):
        print(i)
        break;
else:
    print("*")

or


n=int(input())
a=[]
count=0
if n==1:
    print("*")
    exit()
for i in range(n):
    num=int(input())
    a.append(num)
for i in range(n):
    ans=a.count(a[i])
    if(ans>=(n/2)+1):
        count=count+1
        print(a[i])
        exit()
if(count==0):
    print("*")



3)

#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


int main() {
    int n,m;
    cin>>n;
    cin>>m;
    int a[n],b[m],c[n+m];
    if(n==0 && m==0)
    {
        cout<<"0"<<endl;
        return 0;
    }
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    for(int i=0;i<m;i++)
    {
        cin>>b[i];
    }
    int i1=0,i2=0,count=0;
    while(i1<n && i2<m)
    {
        if(a[i1]<b[i2])
        {
            c[count++]=a[i1++];
        }
        else if(a[i1]>b[i2])
        {
            c[count++]=b[i2++];
        }
        else
        {
            c[count++]=b[i2];
            i1++;
            i2++;
        }
    }
    while(i1<n)
    {
        c[count++]=a[i1++];
    }
    while(i2<m)
    {
        c[count++]=b[i2++];
    }
    if(count%2!=0)
    {
        cout<<c[count/2]<<endl;
    }
    else
    {
        cout<<(c[count/2]+c[(count/2)-1])*1.0/2<<endl;
    }
    return 0;
}



4)#include<bits/stdc++.h>
using namespace std;

int maximum(int a, int b)
{
    if(a>b)
    return  a ;
    else
        return b;
}

int minimum(int a, int b)
{
    if(a<b)
    return a;
    else
        return b;
}

double median(int *a,int n,int *b,int m)
{    
    int min=0,max=n,i,j,median;
    while(min<=max)
    {
        i=(min + max) / 2;
        j=((n + m + 1) / 2) - i;
        if(j<0)
        {
            max = i-1;
            continue;
        }
        if(i<n && j>0 && b[j-1] > a[i])    
            min = i + 1;
        else if(i>0 && j<m && b[j]<a[i-1])    
            max = i - 1;
        else
        {
            if(i==0)        
                median=b[j-1];        
            else if(j==0)        
                median=a[i-1];        
            else        
                median=maximum(a[i-1],b[j-1]);        
            break;
        }
    }
    if ((n + m) % 2 == 1)
        return (double)median;
    if (i == n)
        return (median+b[j])/2.0;
    if (j == m)
        return (median + a[i])/2.0;
    return (median + minimum(a[i], b[j])) / 2.0;
}

int main()
{
    int m,n;
    cin >> n >> m;
    if(m==0 && n==0)
    {
        cout << 0 << endl;
        return 0;
    }
    int a[n],b[m];
    for(int i=0;i<n;i++)
        cin >> a[i];
    for(int i=0;i<m;i++)
        cin >> b[i];
    if(n<m)
        cout << median(a,n,b,m) << endl;
    else
        cout << median(b,m,a,n) << endl;
    return 0;
}

5)
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

    int three_way_search(int array[], int x, int low, int high) {
  if (high >= low) {
    int t1 = low + (high - low) / 3;
    int t2=t1+(high - low) / 3;
    if (array[t1] == x)
    {
        return t1;
    }  
    if(array[t2]==x)
    {
        return t2;
    }     
    if (array[t1] > x)
    {
        return three_way_search(array, x, low, t1 - 1);
    }
    if(array[t2]>x)
    {
        return three_way_search(array, x, t1, t2-1);
    }
    return three_way_search(array, x, t2+1,high);
  }
  return -1;
}

int main() {
    int n,x;
    cin>>n;
    cin>>x;
    int a[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    int m=three_way_search(a,x,0,n-1);
    if(m==-1)
    {
        cout<<"0";
        return 0;
    }
    cout<<"1";
    return 0;
}

6)


#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

void find(int arr[], int n)
{
    int s = 0, e = n-1, i, max, min;
    for (s = 0; s < n-1; s++)
    {
    if(arr[s] > arr[s+1])
        break;
    }
    if (s == n-1)
    {
    printf("*");
    return;
    }
    for(e = n - 1; e > 0; e--)
    {
    if(arr[e] < arr[e-1])
    break;
    }
    max = arr[s];
    min = arr[s];
    for(i = s + 1; i <= e; i++)
    {
    if(arr[i] > max)
    max = arr[i];
    if(arr[i] < min)
    min = arr[i];
    }
    for( i = 0; i < s; i++)
    {
    if(arr[i] > min)
        {
        s = i;
        break;
        }    
    }
    for( i = n -1; i >= e+1; i--)
    {
    if(arr[i] < max)
        {
        e = i;
        break;
        }
    }
    printf("%d\n%d", s, e);
    return;
}
int main(){
    int n,i;
    scanf("%d",&n);
    int a[n];
    for(i=0;i<n;i++){
        scanf("%d",&a[i]);
    }
    if(n==1)
        printf("*");
    else
        find(a, n);
    return 0;
}

