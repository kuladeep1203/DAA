Krushkals:

#include <stdio.h>

int weight_gph[3][100];
int parent[100];
int rank_[100];

int adjmat(int n);
void makeSet(int n);
int findParent(int node);
void union_(int u, int v);
void mst(int n);

int main()
{
    int n;

    printf("Enter no.of vertices : ");
    scanf("%d", &n);

    int x = adjmat(n);
    makeSet(n);
    mst(n);

    return 0;
}

int adjmat(int n)
{
    int src, tgt, wt, x = 0;

    int max_edges = n * (n - 1);

    for (int i = 0; i < max_edges; i++)
    {
        printf("Enter the source and target for the edge [ Enter ( -1 -1 ) to EXIT ] : ");
        scanf("%d%d", &src, &tgt);

        if (src == -1 && tgt == -1)
        {
            break;
        }

        else
        {
            printf("Enter the weight for the edge : ");
            scanf("%d", &wt);

            weight_gph[0][x] = src;
            weight_gph[1][x] = tgt;
            weight_gph[2][x] = wt;

            x++;
        }
    }

    int temp, temp1, temp2;

    for (int i = 0; i < x - 1; i++)
    {
        for (int j = i; j < x; j++)
        {
            if (weight_gph[2][i] > weight_gph[2][j])
            {
                temp = weight_gph[1][j];
                weight_gph[1][j] = weight_gph[1][i];
                weight_gph[1][i] = temp;

                temp1 = weight_gph[0][j];
                weight_gph[0][j] = weight_gph[0][i];
                weight_gph[0][i] = temp1;

                temp2 = weight_gph[2][j];
                weight_gph[2][j] = weight_gph[2][i];
                weight_gph[2][i] = temp2;
            }
        }
    }

    return x;
}

void makeSet(int n)
{
    for (int i = 0; i < n; i++)
    {
        parent[i] = i;
        rank_[i] = 0;
    }
}

int findParent(int node)
{
    if (node == parent[node])
    {
        return node;
    }

    else
    {
        return parent[node] = findParent(parent[node]);
    }
}

void union_(int u, int v)
{
    u = parent[u];
    v = parent[v];

    if (rank_[u] < rank_[v])
    {
        parent[u] = v;
    }

    else if (rank_[v] < rank_[u])
    {
        parent[v] = u;
    }

    else
    {
        parent[v] = u;
        rank_[u]++;
    }
}

void mst(int n)
{
    int x = 0;
    int mst_[n];

    for (int i = 0; i < n; i++)
    {
        if (findParent(weight_gph[0][i]) != findParent(weight_gph[1][i]))
        {
            mst_[x] = i;
            x++;
            union_(weight_gph[0][i], weight_gph[1][i]);
        }
    }

    printf("Source -> Target : Weight \n");

    for (int i = 0; i < x; i++)
    {
        printf(" %d\t-> %d \t : %d \n", weight_gph[0][i], weight_gph[1][i], weight_gph[2][i]);
    }
}






2.Prim's Algorithm

#include <stdio.h>

int mat[100][100];

void adjmat(int n);
void min_span_tree(int n);
int min_neighbour(int n, int min_weights[n], int InMST[n]);

int main()
{
    int n;

    printf("Enter no.of vertices : ");
    scanf("%d", &n);

    adjmat(n);

    min_span_tree(n);

    return 0;
}

void adjmat(int n)
{
    int src, tgt, wt;

    int max_edges = n * (n - 1);

    for (int i = 0; i < max_edges; i++)
    {
        printf("Enter the source and target for the edge [ Enter ( -1 -1 ) to EXIT ] : ");
        scanf("%d%d", &src, &tgt);

        printf("Enter the weight for the edge : ");
        scanf("%d", &wt);

        if (src == -1 && tgt == -1)
        {
            break;
        }

        else if (src == tgt)
        {
            mat[src][tgt] = 0;
        }

        else
        {
            mat[src][tgt] = wt;
            mat[tgt][src] = wt;
        }
    }

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            printf(" %d ", mat[i][j]);
        }
        printf("\n");
    }
}

void min_span_tree(int n)
{
    int parent[n];
    int InMST[n];
    int min_weights[n];

    for (int i = 0; i < n; i++)
    {
        min_weights[i] = __INT_MAX__;
    }

    for (int i = 0; i < n; i++)
    {
        InMST[i] = 0;
    }

    parent[0] = -1;
    min_weights[0] = 0;

    for (int i = 0; i < n - 1; i++)
    {
        int v = min_neighbour(n, min_weights, InMST);

        InMST[v] = 1;

        for (int j = 0; j < n; j++)
        {
            if (InMST[j] == 0 && mat[v][j] < min_weights[j] && mat[v][j] != 0)
            {
                min_weights[j] = mat[v][j];
                parent[j] = v;
            }
        }
    }

    

    printf("source -> target : weight \n");

    for (int i = 0; i < n; i++)
    {
        printf(" %d -> %d : %d \n", parent[i], i, mat[parent[i]][i]);
    }
}

int min_neighbour(int n, int min_weights[n], int InMST[n])
{
    int min = __INT_MAX__;
    int vertex;

    for (int i = 0; i < n; i++)
    {
        if (InMST[i] == 0 && min_weights[i] < min)
        {
            min = min_weights[i];
            vertex = i;
        }
    }

    return vertex;
}








3)second mst

#include <bits/stdc++.h>
using namespace std;
int parent[100005];
vector<int> present;


int edg;
struct edge {
	int src, dest, weight;
} edges[100005];

bool cmp(edge x, edge y)
{
	return x.weight < y.weight;
}


void initialise(int n)
{
	
	for (int i = 1; i <= n; i++)
		parent[i] = i;
}


int find(int x)
{
	if (parent[x] == x)
		return x;
	return parent[x] = find(parent[x]);
}


int union1(int i, int sum)
{
	int x, y;
	x = find(edges[i].src);
	y = find(edges[i].dest);
	if (x != y) {

		
		parent[x] = y;

		
		present.push_back(i);

		
		sum += edges[i].weight;
	}
	return sum;
}


int union2(int i, int sum)
{
	int x, y;
	x = find(edges[i].src);
	y = find(edges[i].dest);
	if (x != y) {
		
		parent[x] = y;

		
		sum += edges[i].weight;
		edg++;
	}
	return sum;
}


int main()
{
	
	int V, E;
	V = 5;
	E = 8;

	
	initialise(V);

	

	vector<int> source = { 1, 3, 2, 3,
						2, 5, 1, 3 };
	vector<int> destination = { 3, 4, 4,
								2, 5, 4, 2, 5 };
	vector<int> weights = { 75, 51, 19,
							95, 42, 31, 9, 66 };
	for (int i = 0; i < E; i++) {
		edges[i].src = source[i];
		edges[i].dest = destination[i];
		edges[i].weight = weights[i];
	}

	
	sort(edges, edges + E, cmp);

	int sum = 0;
	for (int i = 0; i < E; i++) {
		sum = union1(i, sum);
	}

	
	cout << "MST: " << sum << "\n";

	
	int sec_best_mst = INT_MAX;

	
	sum = 0;
	int j;
	for (j = 0; j < present.size(); j++) {
		initialise(V);
		edg = 0;
		for (int i = 0; i < E; i++) {

			
			if (i == present[j])
				continue;
			sum = union2(i, sum);
		}
		
		if (edg != V - 1) {
			sum = 0;
			continue;
		}

		
		if (sec_best_mst > sum)
			sec_best_mst = sum;
		sum = 0;
	}

	
	cout << "Second Best MST: "
		<< sec_best_mst << "\n";
	return 0;
}